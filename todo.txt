Database
    1. Table design
        create table employee(
            employee_id int primary key generated always as identity,
            employee_first_name varchar(50),
            employee_last_name varchar(50),
            employee_email varchar(50),
            employee_user_name varchar(50),
            employee_password varchar(50),
            employee_is_manager boolean default false
        );

        create table reimbursement(
            reimbursement_id int primary key generated always as identity,
            reimbursement_amount int,
            reimbursement_state varchar (50) default 'pending',
            reimbursement_last_day_modified int,
            reimbursement_message varchar (500),
            reimbursement_response varchar (500) default null,
            reviewer_id int default null,
            employee_id int,
            constraint fk_reimbursement_employee foreign key (employee_id) references employee(employee_id),
            constraint fk_reimbursement_reviewer foreign key (reviewer_id) references employee(employee_id)
        );
    2. Table populating
    3. Connecting data base to flask server


API
    1. write object classes
        a. employee
        b. reimbursement
    2. Dao construction
        a. Design tests
        b. execute tests
        c. use with database information
    3. Service Construction
        a. design tests
        b. execute tests
    4. Ensure logging in works


Frontend
    1. connect forms to api
        a. login form
        b. reimbursement
            I. Basic upload of ammount and message.
            II.(file upload, New table holding file link?)
        c. manager approval page
            I. Click to update
            II.
            III. (add filter to see past and present with messages)
    2. connect displays to api
        a. employee sees THEIR reimbursements
        b. statistics for manager. (Add filters and have a lot of fun)
    3. style to look like a dragons and his minions. Or just make generic villion and their minions.
    4. Front end testing

Clean up
    1. make connections variables

Stretch goals
    1. Creating an account
        a. Add crud to daos
        b. Add test for crud
        c. apply logic to dao
        b. desighn route
        e. implement user story
        f. apply to web page
        g. test front end
    2. Edit accounts
        a. Add crud to daos
        b. Add test for crud
        c. apply logic to dao
        b. desighn route
        e. implement user story
        f. apply to web page
        g. test front end
    3.